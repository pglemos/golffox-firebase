// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/motorista/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/motorista">> = Specific
  const handler = {} as typeof import("../../app/motorista/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/operador/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/operador">> = Specific
  const handler = {} as typeof import("../../app/operador/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/painel/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/painel">> = Specific
  const handler = {} as typeof import("../../app/painel/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/passageiro/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/passageiro">> = Specific
  const handler = {} as typeof import("../../app/passageiro/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/alerts/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/alerts">> = Specific
  const handler = {} as typeof import("../../app/api/alerts/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/login">> = Specific
  const handler = {} as typeof import("../../app/api/auth/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/profile/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/profile">> = Specific
  const handler = {} as typeof import("../../app/api/auth/profile/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/register/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/register">> = Specific
  const handler = {} as typeof import("../../app/api/auth/register/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/companies/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/companies/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/companies/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/companies/[id]/toggle-status/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/companies/[id]/toggle-status">> = Specific
  const handler = {} as typeof import("../../app/api/companies/[id]/toggle-status/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/companies/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/companies">> = Specific
  const handler = {} as typeof import("../../app/api/companies/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/drivers/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drivers/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/drivers/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/drivers/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drivers">> = Specific
  const handler = {} as typeof import("../../app/api/drivers/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/health/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/health">> = Specific
  const handler = {} as typeof import("../../app/api/health/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/passengers/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/passengers/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/passengers/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/passengers/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/passengers">> = Specific
  const handler = {} as typeof import("../../app/api/passengers/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/routes/[id]/finish/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/routes/[id]/finish">> = Specific
  const handler = {} as typeof import("../../app/api/routes/[id]/finish/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/routes/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/routes/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/routes/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/routes/[id]/start/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/routes/[id]/start">> = Specific
  const handler = {} as typeof import("../../app/api/routes/[id]/start/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/routes/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/routes">> = Specific
  const handler = {} as typeof import("../../app/api/routes/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stats/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stats">> = Specific
  const handler = {} as typeof import("../../app/api/stats/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/vehicles/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/vehicles/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/vehicles/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/vehicles/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/vehicles">> = Specific
  const handler = {} as typeof import("../../app/api/vehicles/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
